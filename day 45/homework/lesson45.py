# 1. დაპრინტეთ Hello world.
print("Hello world")

# 2. შექმენით 2 int ტიპის ცვლადი და გამოიტანეთ მათი ჯამი.
num1 = 567
num2 = 908
print(num1 + num2)
# 3. შექმენით 2 str ტიპის ცვლადი და გამოიტანეთ მათი შეერთებული ვერსია (ასევე კომენტარის სახით აღწერეთ რა არის concatenation).
name = "Lika"
surname = "Chxikvadze"
print(name + " " + surname)
#concatenation არის სტრინგების შეერთება

# 4. შექმენით 2 int ტიპის ცვლადი და გამოიტანეთ მათი განაყოფი, შემდეგ კი ახსენით რატომ გამოიტანა float-ი და რა ქვია ამ convert-ს (implicit or explicit).
int1 = 10
int2 = 2
print(int1/int2)
# ამ ორი რიცხვის განაყოფმა გამოიტანა float რადგან პითონში რიცხვების გაყოფისას სრულდება implicit convert(მონაცემთა ტიპის ავტომატურად შეცვლა)


# 5. გაიხსენეთ ყველა შედარების ოპერატორი და ჩამოწერეთ ყველაზე 1 მაგალითი.
numm1 = 44
numm2 = 39
print(numm1 < numm2)
print(numm1 > numm2)
print(numm1 <= numm2)
print(numm1 >= numm2)
print(numm1 == numm2)
print(numm1 != numm2)

# 6. შეურიეთ შედარების ოპერატორები და მათემატიკური ოპერაციები (მაგ: 5 + 5 == 8  + 2).
40 * 2 == 76 + 4
5666*90 != 35**2
7*3 > 8*2

# 7. გაიხსენეთ ლოგიკური ოპერატორი და ჩამოწერეთ ყველა კომბინაცია.
#True and True
#True and False
#False and True
#False and False

#True or True
#True or False 
#False or True
#False or False

# 8. შეურიეთ ერთმანეთს ლოგიკური და შედარების ოპერატორები და მოიყვანეთ 5 მაგალითი.
40 * 2 == 76 + 4 and 7*3 > 8*2
5666*90 != 35**2 or 14 - 3 == 1000

# 9. შექმენით for loop-ი 1-დან 10-მდე რიცხვების დასაბეჭდად.
for i in range(0,11):
    print(i)

# 10. შექმენით for loop-ი თითოეული სიმბოლოს დასაბეჭდად სტრინგში -> "Hello, World!".
for i in "Hello, World!":
    print(i)

# 11. შექმენით while loop-ი 1-დან 10-მდე რიცხვების დასაბეჭდად.
i = 1
while i < 10:
    print(i)

# 12. შექმენით while loop-ი, რომელიც დაიწყებს რიცხვების შეკრებას 1-დან, სანამ ჯამი არ გაუტოლდება 50-ს.
count = 1
while count < 50:
    count += 1
    print(count)

# 13. შექმენით ფუნქცია რომელსაც გადაეცემა რიცხვების სია,თქვენი მოვალეობააა გამოითვალე ამ სიის საშუალო არითმეტიკული. test case: [1,3,4,5,2] | output: 3
def average(numbers):
    return sum(numbers)/len(numbers)

# 14. შექმენით ფუნქცია რომელსაც გადაეცემა  რიცხვების სია,თქვენი მოვალეობააა შექმნათ ახალი სია და ამ ახალ სიაში გამოიტანოთ ყოველი რიცხვის კვადრატი (append) და შემდეგ დააბრუნეთ ახალი სია.
# test case: [3,12,5,2,6] | output: [9,144,25,4,36]
def square(nums):
    squared_nums = []
    for num in nums:
        squared_nums.append(num**2)
    return squared_nums
numbers = [3,12,5,2,6]
result = square(numbers)
print( result)


# 15. გაიხსენეთ ყველა list-ის და string-ის მეთოდები.
# < string functions - სტრინგის ფუნქციები >

# .lower() --> სტრინგი გადაჰყავს lower case-ში
# .upper() --> სტრინგი გადაჰყავს upper case-ში
# .capitalize() --> სტრინგის პირველი ასო გადაჰყავს upper case-ში
# .find("x") --> ეს ფუნქცია გიბრუნებს თუ სტრინგში რომელ ინდექსზე დგას მითითებული ასო, ამ შემთხვევაში მაგ. "x". ↓
#   • თუ () ფრჩხილებში არ მივუთითებთ ასოს, ფუნქცია ვერ იმუშავებს და გამოიტანს ერორს. 
#   • თუ () მივუთითებთ ისეთ ასოს რომელსაც სტრინგი არ შეიცავს, ფუნქცია გამოიტანს -1 ს ინდექსად.


# < built-in functions - ჩაშენებული ფუნქციები >

# len() --> აბრუნებს სიის ან სტრინგის ზომას. ამ ფუნქციას არ სჭირდება წერტილი.
# .append() --> სიის ბოლოს ამატებს ელემენტს ↓
#   • ეს ფუნქცია მხოლოდ მუშაობს სიებზე და არა სტრინგებზე, რადგან სიები შეცვლადია(mutable), ხოლო სტრინგები უცვლადი(immutable). სტრინგებზე გამოყენების შემთხვევაში მიიღებს error-ს.
# .insert() --> სიაში ამატებს ელემენტს მოცემულ ინდექსზე. მაგ items.append(1,"product") ↓
#   • ამ ფუნქციას 2 არგუმენტი გადაეცემა. პირველ არგუმენტად გადაეცემა ინდექსი, ხოლო მეორე არგუმენტად სტრინგი.
# pop() --> სიიდან შლის ელემენტს. მას არგუმენტად მხოლოდ ინდექსი გადაეცემა, მაგ. items.pop(1)